require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/batches", type: :request do
  
  let(:user) { create(:user) }
  
  before(:each){
    sign_in_user user
  }

  describe "GET /index" do
    it "renders a successful response" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      create_list(:batch, 3)
      get school_course_batches_url(batch.school, batch.course)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      get school_course_batch_url(batch.school, batch.course, batch)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      get new_school_course_batch_url(batch.school, batch.course)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      get edit_school_course_batch_url(batch.school, batch.course, batch)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Batch" do
        school = create(:school)
        course = create(:course, school: school)
        batch_params = attributes_for(:batch, school: school, course: course)
        batch_ancestor_params = {school_id: school.id, course_id: course.id}
        expect {
          post school_course_batches_url(school, course), params: { batch: batch_params.merge(batch_ancestor_params) }
        }.to change(Batch, :count).by(1)
      end

      it "redirects to the created batch" do
        school = create(:school)
        course = create(:course, school: school)
        batch_params = attributes_for(:batch, school: school, course: course)
        batch_ancestor_params = {school_id: school.id, course_id: course.id}
        post school_course_batches_url(school, course), params: { batch: batch_params.merge(batch_ancestor_params) }
        expect(response).to redirect_to(school_course_batch_url(school, course, Batch.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Batch" do
        school = create(:school)
        course = create(:course, school: school)
        batch_params = attributes_for(:batch, :invalid)
        expect {
          post school_course_batches_url(school, course), params: { batch: batch_params }
        }.to change(Batch, :count).by(0)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {name: "Batch 1"}
      }

      it "updates the requested batch" do
        school = create(:school)
        course = create(:course, school: school)
        batch = create(:batch, school: school, course: course)
        patch school_course_batch_url(batch.school, batch.course, batch), params: { batch: new_attributes }
        batch.reload
        expect(batch.name).to eql("Batch 1")
      end

      it "redirects to the batch" do
        school = create(:school)
        course = create(:course, school: school)
        batch = create(:batch, school: school, course: course)
        patch school_course_batch_url(batch.school, batch.course, batch), params: { batch: new_attributes }
        batch.reload
        expect(response).to redirect_to(school_course_batch_url(batch.school, batch.course, batch))
      end
    end

    context "with invalid parameters" do
      it "does not update batch" do
        school = create(:school)
        course = create(:course, school: school)
        batch = create(:batch, school: school, course: course)
        batch_params = attributes_for(:batch, :invalid)
        patch school_course_batch_url(batch.school, batch.course, batch), params: { batch: batch_params }
        expect(response).to have_http_status(:unprocessable_entity)
        batch.reload
        expect(batch.name).not_to be_empty
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested batch" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      expect {
        delete school_course_batch_url(batch.school, batch.course, batch)
      }.to change(Batch, :count).by(-1)
    end

    it "redirects to the batches list" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      delete school_course_batch_url(batch.school, batch.course, batch)
      expect(response).to redirect_to(school_course_batches_url(batch.school, batch.course))
    end
  end
end

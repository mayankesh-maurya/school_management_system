require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/students", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Student. As you add validations to Student, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  
  before(:each){
    sign_in_user user
  }

  describe "GET /index" do
    it "renders a successful response" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      student = create(:student, school: school, course: course, batch: batch)
      create_list(:batch, 3)
      get school_course_batch_students_url(student.school, student.course, student.batch)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      student = create(:student, school: school, course: course, batch: batch)
      get school_course_batch_student_url(student.school, student.course, student.batch, student)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      student = create(:student, school: school, course: course, batch: batch)
      get new_school_course_batch_student_url(student.school, student.course, student.batch)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      student = create(:student, school: school, course: course, batch: batch)
      get edit_school_course_batch_student_url(student.school, student.course, student.batch, student)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Student" do
        school = create(:school)
        course = create(:course, school: school)
        batch = create(:batch, school: school, course: course)
        student_params = attributes_for(:student, school: school, course: course, batch: batch)
        student_ancestor_params = {school_id: school.id, course_id: course.id, batch_id: batch.id}
        expect {
          post school_course_batch_students_url(school, course, batch), params: { student: student_params.merge(student_ancestor_params) }
        }.to change(Student, :count).by(1)
      end

      it "redirects to the created student" do
        school = create(:school)
        course = create(:course, school: school)
        batch = create(:batch, school: school, course: course)
        student_params = attributes_for(:student, school: school, course: course, batch: batch)
        student_ancestor_params = {school_id: school.id, course_id: course.id, batch_id: batch.id}
        post school_course_batch_students_url(school, course, batch), params: { student: student_params.merge(student_ancestor_params) }
        expect(response).to redirect_to(school_course_batch_student_url(school, course, batch, Student.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Student" do
        school = create(:school)
        course = create(:course, school: school)
        batch = create(:batch, school: school, course: course)
        student_params = attributes_for(:student, :invalid)
        expect {
          post school_course_batch_students_url(school, course, batch), params: { student: student_params }
        }.to change(Student, :count).by(0)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {name: "Student 1"}
      }

      it "updates the requested student" do
        school = create(:school)
        course = create(:course, school: school)
        batch = create(:batch, school: school, course: course)
        student = create(:student, school: school, course: course, batch: batch)
        patch school_course_batch_student_url(student.school, student.course, student.batch, student), params: { student: new_attributes }
        student.reload
        expect(student.name).to eql("Student 1")
      end

      it "redirects to the student" do
        school = create(:school)
        course = create(:course, school: school)
        batch = create(:batch, school: school, course: course)
        student = create(:student, school: school, course: course, batch: batch)
        patch school_course_batch_student_url(student.school, student.course, student.batch, student), params: { student: new_attributes }
        student.reload
        expect(response).to redirect_to(school_course_batch_student_url(student.school, student.course, student.batch, student))
      end
    end

    context "with invalid parameters" do
      it "does not update student" do
        school = create(:school)
        course = create(:course, school: school)
        batch = create(:batch, school: school, course: course)
        student = create(:student, school: school, course: course, batch: batch)
        student_params = attributes_for(:student, :invalid)
        patch school_course_batch_student_url(student.school, student.course, student.batch, student), params: { student: student_params }
        expect(response).to have_http_status(:unprocessable_entity)
        student.reload
        expect(student.email).not_to be_empty
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested student" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      student = create(:student, school: school, course: course, batch: batch)
      expect {
        delete school_course_batch_student_url(student.school, student.course, student.batch, student)
      }.to change(Student, :count).by(-1)
    end

    it "redirects to the students list" do
      school = create(:school)
      course = create(:course, school: school)
      batch = create(:batch, school: school, course: course)
      student = create(:student, school: school, course: course, batch: batch)
      delete school_course_batch_student_url(student.school, student.course, student.batch, student)
      expect(response).to redirect_to(school_course_batch_students_url(student.school, student.course, student.batch))
    end
  end
end
